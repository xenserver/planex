# -*- MakeFile -*-
############################################################################
# Configuration variables
############################################################################

DIST ?= .el6
TOPDIR ?= _build
DEPS = $(TOPDIR)/deps
PINSDIR ?= PINS
REPOSDIR ?= repos
RPM_DEFINES ?= --define="_topdir $(TOPDIR)" \
               --define="dist $(DIST)" \
               $(RPM_EXTRA_DEFINES)

# Dependencies are not included when we are only cleaning as they may
# have to be rebuilt and it makes no sense to do that when we know we are
# going to delete the whole working directory.
ifneq ($(MAKECMDGOALS),clean)
include $(DEPS)
endif


############################################################################
# Executable names and flags
############################################################################

FETCH ?= planex-fetch
FETCH_FLAGS ?= $(RPM_DEFINES) $(FETCH_EXTRA_FLAGS)

EXTRACT ?= planex-extract
EXTRACT_FLAGS ?= $(RPM_DEFINES) $(EXTRACT_EXTRA_FLAGS)

RPMBUILD ?= planex-make-srpm
RPMBUILD_FLAGS ?= ${QUIET+--quiet} $(RPM_DEFINES)

CREATEREPO ?= createrepo
CREATEREPO_FLAGS ?= ${QUIET+--quiet}

MOCK ?= planex-build-mock
MOCK_FLAGS ?= ${QUIET+--quiet} \
              --configdir=mock \
              --resultdir=$(dir $@)

DEPEND ?= planex-depend
DEPEND_FLAGS ?= $(RPM_DEFINES) --pins-dir $(PINSDIR) $(DEPEND_EXTRA_FLAGS)

MANIFEST ?= planex-manifest
MANIFEST_FLAGS ?=

PATCHQUEUE ?= planex-patchqueue
PATCHQUEUE_FLAGS ?= --repos $(REPOSDIR)

ifdef QUIET
AT = @
endif

############################################################################
# Main targets
############################################################################

.PHONY: all rpms
all: $(TOPDIR) $(RPMS)

$(TOPDIR)/RPMS/repodata/repomd.xml: $(RPMS)
	$(AT)$(CREATEREPO) $(CREATEREPO_FLAGS) $(TOPDIR)/RPMS

rpms: $(TOPDIR)/RPMS/repodata/repomd.xml

srpms: $(SRPMS)


.PHONY: clean
clean:
	rm -rf $(TOPDIR) RPMS MANIFESTS


.DELETE_ON_ERROR: $(TOPDIR)
$(TOPDIR):
	@echo -n Populating build directory: $(TOPDIR)...
	@mkdir -p $(TOPDIR)
	@mkdir -p SPECS SOURCES
	@mkdir -p $(TOPDIR)/RPMS
	@mkdir -p $(TOPDIR)/SPECS
	@mkdir -p $(TOPDIR)/MANIFESTS
	@ln -s $(TOPDIR)/RPMS RPMS
	@ln -s $(TOPDIR)/MANIFESTS MANIFESTS
	@echo done


############################################################################
# Spec file transformation rules
############################################################################

# Placeholder
$(TOPDIR)/SPECS/%.spec: SPECS/%.spec
	$(AT) mkdir -p $(dir $@)
	$(AT) cp -lf $< $@


############################################################################
# Manifest creation rules
############################################################################

MANIFESTS/%.json:
	@echo [MANIFEST] $@
	$(AT)$(MANIFEST) $(MANIFEST_FLAGS) $^ > $@

############################################################################
# Source download rules
############################################################################

# Fetch a source tarball listed in a spec file.
.DELETE_ON_ERROR: %.tar %.tar.gz %.tar.xz %.tar.bz2 %.tgz %.tbz %.zip %.pdf %.cpio
%.tar %.tar.gz %.tar.xz %.tar.bz2 %.tgz %.tbz %.zip %.pdf %.cpio:
	@echo [FETCH] $@
	$(AT)$(FETCH) $(FETCH_FLAGS) $< $@

# Fetch a patch tarball listed in a link file.
.PRECIOUS: $(TOPDIR)/SOURCES/%/patches.tar
$(TOPDIR)/SOURCES/%/patches.tar: $(PINSDIR)/%.pin SPECS/%.spec
	@echo [PATCHQUEUE] $@
	$(AT)$(PATCHQUEUE) $(PATCHQUEUE_FLAGS) $< $@

$(TOPDIR)/SOURCES/%/patches.tar: $(PINSDIR)/%.pin SPECS/%.lnk
	@echo [PATCHQUEUE] $@
	$(AT)$(PATCHQUEUE) $(PATCHQUEUE_FLAGS) $< $@

$(TOPDIR)/SOURCES/%/patches.tar: $(PINSDIR)/%.pin
	@echo [PATCHQUEUE] $@
	$(AT)$(PATCHQUEUE) $(PATCHQUEUE_FLAGS) $< $@

$(TOPDIR)/SOURCES/%/patches.tar: SPECS/%.lnk
	@echo [FETCH] $@
	$(AT)$(FETCH) $(FETCH_FLAGS) $< $@


############################################################################
# Patch extraction rules
############################################################################

# Extract a spec file from a patch tarball.
$(TOPDIR)/SPECS/%.spec: SPECS/%.lnk $(TOPDIR)/SOURCES/%/patches.tar
	$(AT)$(EXTRACT) $(EXTRACT_FLAGS) --output $@ --link $^


############################################################################
# RPM build rules
############################################################################

# Build a source RPM from a Spec file and a tarball.   We define %dist
# to ensure that the names of the source RPMs, which are built outside the
# mock chroot, match the names of the binary RPMs, which are built inside
# the chroot.	Without this we might generate foo-1.0.fc20.src.rpm
# (Fedora host) and foo-1.0.el6.x86_64.rpm (CentOS chroot).
%.src.rpm:
	@echo [RPMBUILD] $@ 
	$(AT)$(RPMBUILD) $(RPMBUILD_FLAGS) $^

# Build one or more binary RPMs from a source RPM.   A typical source RPM
# might produce a base binary RPM, a -devel binary RPM containing library
# and header files and a -debuginfo binary RPM containing debug symbols.
# The repository metadata is updated after building a binary package so that
# a subsequent mock build for a package which depend on this one is able
# to find and install it.
%.rpm:
	@echo [MOCK] $<
	$(AT)$(MOCK) $(MOCK_FLAGS) --rebuild $<


############################################################################
# Dependency build rules
############################################################################

# Generate dependency rules linking spec files to tarballs, source
# packages and binary packages.   planex-depend generates rules suitable
# for RPM or Debian builds depending on the host distribution.
# If dependency generation fails, the deps file is deleted to avoid
# problems with empty, incomplete or corrupt deps.   
.DELETE_ON_ERROR: $(DEPS)
$(DEPS): $(TOPDIR) \
		$(patsubst SPECS/%.spec,$(TOPDIR)/SPECS/%.spec,$(wildcard SPECS/*.spec)) \
		$(patsubst SPECS/%.lnk,$(TOPDIR)/SPECS/%.spec,$(wildcard SPECS/*.lnk))
	@echo Updating dependencies...
	$(AT)$(DEPEND) $(DEPEND_FLAGS) SPECS/*.lnk $(TOPDIR)/SPECS/*.spec > $@

# vim:ft=make:
