# -*- MakeFile -*-
############################################################################
# Configuration variables
############################################################################

DIST ?= .el6
TOPDIR ?= _build
DEPS = $(TOPDIR)/deps
PINSFILE = pins
PINDEPS = $(TOPDIR)/pindeps
PINSDIR = $(TOPDIR)/PINS


############################################################################
# Executable names and flags
############################################################################

FETCH ?= planex-fetch
FETCH_FLAGS ?= --topdir $(TOPDIR) $(FETCH_EXTRA_FLAGS)

RPMBUILD ?= planex-make-srpm
RPMBUILD_FLAGS ?= --quiet --topdir $(TOPDIR) --dist $(DIST)

CREATEREPO ?= createrepo
CREATEREPO_FLAGS ?= --quiet --update

MOCK ?= mock
MOCK_FLAGS ?= --configdir=$(TOPDIR)/mock --quiet \
              --resultdir=$(dir $@) --uniqueext=$(notdir $@) \
              --disable-plugin=package_state

DEPEND ?= planex-depend
DEPEND_FLAGS ?= -d $(DIST) --topdir $(TOPDIR) --ignore-from ignore \
                --pins-dir $(PINSDIR) $(DEPEND_EXTRA_FLAGS)

COWBUILDER ?= sudo cowbuilder
COWBUILDER_FLAGS ?= --build --configfile pbuilder/pbuilderrc \
                    --buildresult RPMS

############################################################################
# Main targets
############################################################################

.PHONY: all rpms srpms srpm_repo

all: $(TOPDIR) rpms

.PHONY: clean
clean:
	rm -rf $(TOPDIR) SRPMS RPMS


.DELETE_ON_ERROR: $(TOPDIR)
$(TOPDIR):
	@echo -n Populating build directory: $(TOPDIR)...
	@mkdir -p $(TOPDIR)
	@mkdir -p SPECS SOURCES
	@ln -s ../SPECS $(TOPDIR)/SPECS
	@ln -s ../SOURCES $(TOPDIR)/SOURCES
	@ln -s ../mock $(TOPDIR)/mock
	@mkdir $(TOPDIR)/RPMS
	@mkdir $(TOPDIR)/SRPMS
	@ln -s $(TOPDIR)/RPMS RPMS
	@ln -s $(TOPDIR)/SRPMS SRPMS
	@$(CREATEREPO) --quiet RPMS
	@$(CREATEREPO) --quiet SRPMS
	@echo done


############################################################################
# Source download rules
############################################################################

# Fetch a source tarball listed in a spec file.
.DELETE_ON_ERROR: %.tar %.tar.gz %.tar.bz2 %.tgz %.tbz %.zip %.pdf
%.tar %.tar.gz %.tar.bz2 %.tgz %.tbz %.zip %.pdf:
	@echo [FETCH] $@
	@$(FETCH) $(FETCH_FLAGS) $< $@


############################################################################
# RPM build rules
############################################################################

# Build a source RPM from a Spec file and a tarball.   We define %dist
# to ensure that the names of the source RPMs, which are built outside the
# mock chroot, match the names of the binary RPMs, which are built inside
# the chroot.	Without this we might generate foo-1.0.fc20.src.rpm
# (Fedora host) and foo-1.0.el6.x86_64.rpm (CentOS chroot).
%.src.rpm:
	@echo [RPMBUILD] $@ 
	@$(RPMBUILD) $(RPMBUILD_FLAGS) $^

# Phony target to create repository metadata for the SRPMs.   This makes
# it possible to add the SRPMS directory to yum.conf and use yumdownloader
# to install source RPMs.
srpm_repo: srpms
	@echo [CREATEREPO] SRPMS
	@flock --timeout 30 ./$(TOPDIR)/SRPMS $(CREATEREPO) $(CREATEREPO_FLAGS) ./$(TOPDIR)/SRPMS

# Build one or more binary RPMs from a source RPM.   A typical source RPM
# might produce a base binary RPM, a -devel binary RPM containing library
# and header files and a -debuginfo binary RPM containing debug symbols.
# The repository metadata is updated after building a binary package so that
# a subsequent mock build for a package which depend on this one is able
# to find and install it.
#
# We take a shared lock on RPMS around mock to prevent concurrent 
# createrepo jobs from corrupting the repo metadata files as mock runs.
# We take an exclusive lock around createrepo to ensure that no mock
# runs at the same time as a createrepo is updating the repo metadata.
%.rpm:
	@echo [MOCK] $<
	@flock --shared --timeout 300 ./$(TOPDIR)/RPMS $(MOCK) $(MOCK_FLAGS) --rebuild $<
	@echo [CREATEREPO] $<
	@flock --exclusive --timeout 300 ./$(TOPDIR)/RPMS $(CREATEREPO) $(CREATEREPO_FLAGS) ./$(TOPDIR)/RPMS


############################################################################
# Deb build rules
############################################################################

# Build a Debian source package from a Spec file and a tarball.
# makedeb.py loads the Spec file, generates an equivalent Debian source
# directory structure, then runs 'dpkg-source' to create the .dsc file.
# The conversion is basic, but works fairly well for straightforward Spec
# files.
%.dsc: 
	@echo [MAKEDEB] $@
	@planex-makedeb $<
	@echo [UPDATEREPO] $@
	@flock --timeout 30 ./$(TOPDIR)/SRPMS scripts/deb/updaterepo sources $(TOPDIR)/SRPMS

# Build one or more binary Debian packages from from a source package.
# As with the RPM build, a typical source package might produce several
# binary packages.  The repository metadata is updated after building a
# binary package so that a subsequent build for a package which depends
# on this one is able to find and install it.
%.deb:
	@echo [COWBUILDER] $@
	@touch RPMS/Packages
	@$(COWBUILDER) $(COWBUILDER_FLAGS) $<
	@echo [UPDATEREPO] $@
	@flock --timeout 30 ./RPMS scripts/deb/updaterepo packages RPMS


############################################################################
# Dependency build rules
############################################################################

# Generate all the pinning rules
.DELETE_ON_ERROR: $(PINDEPS)
$(PINDEPS): $(PINSFILE)
	@echo Updating pinning rules...
	@planex-pin --pins-file $< --pins-dir $(PINSDIR) rules $(DEPS) > $@

-include $(PINDEPS)

# Generate dependency rules linking spec files to tarballs, source
# packages and binary packages.   planex-depend generates rules suitable
# for RPM or Debian builds depending on the host distribution.
# If dependency generation fails, the deps file is deleted to avoid
# problems with empty, incomplete or corrupt deps.   
.DELETE_ON_ERROR: $(DEPS)
$(DEPS): $(TOPDIR) SPECS/*.spec $(wildcard $(PINSFILE) $(PINDEPS) $(PINSDIR)/*.spec)
	@echo Updating dependencies...
	@$(DEPEND) $(DEPEND_FLAGS) SPECS/*.spec > $@

-include $(DEPS)

# vim:ft=make:
