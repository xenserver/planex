# -*- MakeFile -*-
############################################################################
# Configuration variables
############################################################################

DIST ?= .el6
TOPDIR ?= _build
SPECS ?= $(wildcard SPECS/*.spec)
LINKS ?= $(wildcard SPECS/*.lnk)
DEPS = $(TOPDIR)/deps
PINSDIR ?= PINS
REPOSDIR ?= repos
RPM_DEFINES ?= --define="_topdir $(TOPDIR)" \
               --define="dist $(DIST)" \
               $(RPM_EXTRA_DEFINES)
MOCK_CONFIGDIR ?= /etc/mock
MOCK_ROOT ?= default

# Dependencies are not included when we are only cleaning as they may
# have to be rebuilt and it makes no sense to do that when we know we are
# going to delete the whole working directory.
ifneq ($(MAKECMDGOALS),clean)
include $(DEPS)
endif


############################################################################
# Executable names and flags
############################################################################

FETCH ?= planex-fetch
FETCH_FLAGS ?= $(RPM_DEFINES) $(FETCH_EXTRA_FLAGS)

RPMBUILD ?= planex-make-srpm
RPMBUILD_FLAGS ?= ${QUIET+--quiet} $(RPM_DEFINES) $(RPMBUILD_EXTRA_FLAGS)

CREATEREPO ?= createrepo
CREATEREPO_FLAGS ?= ${QUIET+--quiet}

MOCK ?= planex-build-mock
MOCK_FLAGS ?= ${QUIET+--quiet} \
              $(RPM_DEFINES) \
              --configdir=$(MOCK_CONFIGDIR) \
              --root=$(MOCK_ROOT) \
              --resultdir=$(@D) \
              $(MOCK_EXTRA_FLAGS)

DEPEND ?= planex-depend
DEPEND_FLAGS ?= $(RPM_DEFINES) $(DEPEND_EXTRA_FLAGS)

MANIFEST ?= planex-manifest
MANIFEST_FLAGS ?=

PATCHQUEUE ?= planex-patchqueue
PATCHQUEUE_FLAGS ?= --repos $(REPOSDIR)

ifdef QUIET
AT = @
endif


############################################################################
# Main targets
############################################################################

# Always delete a target if its recipe fails.
# For debugging, use make's --ignore-errors flag to keep targets and continue
# if recipes fail.
.DELETE_ON_ERROR:

.PHONY: all rpms
all: $(RPMS)

$(RPMS): $(MOCK_CONFIGDIR)/$(MOCK_ROOT).cfg

$(TOPDIR)/RPMS/repodata/repomd.xml: $(RPMS)
	$(AT)$(CREATEREPO) $(CREATEREPO_FLAGS) $(TOPDIR)/RPMS

rpms: $(TOPDIR)/RPMS/repodata/repomd.xml

srpms: $(SRPMS)


.PHONY: clean
clean:
	rm -rf $(TOPDIR)


############################################################################
# Manifest creation rules
############################################################################

$(TOPDIR)/MANIFESTS/%.json:
	@echo [MANIFEST] $@
	$(AT) mkdir -p $(@D)
	$(AT)$(MANIFEST) $(MANIFEST_FLAGS) $^ > $@


############################################################################
# Source download rules
############################################################################

# Fetch a source tarball listed in a spec or link file.
$(TOPDIR)/SOURCES/%:
	@echo [FETCH] $@
	$(AT) mkdir -p $(@D)
	$(AT)$(FETCH) $(FETCH_FLAGS) $< $@

# Create a patchqueue tarball for a pinned package.
# Pinned patchqueues are always regenerated.
.PHONY: FORCE
FORCE:

$(TOPDIR)/SOURCES/%/patches.tar: $(PINSDIR)/%.pin FORCE
	@echo [PATCHQUEUE] $@
	$(AT) mkdir -p $(@D)
	$(AT)$(PATCHQUEUE) $(PATCHQUEUE_FLAGS) $< $@


############################################################################
# RPM build rules
############################################################################

# Build a source RPM from a Spec file and a tarball.   We define %dist
# to ensure that the names of the source RPMs, which are built outside the
# mock chroot, match the names of the binary RPMs, which are built inside
# the chroot.	Without this we might generate foo-1.0.fc20.src.rpm
# (Fedora host) and foo-1.0.el6.x86_64.rpm (CentOS chroot).
%.src.rpm:
	@echo [RPMBUILD] $@ 
	$(AT) mkdir -p $(@D)
	$(AT)$(RPMBUILD) $(RPMBUILD_FLAGS) $^

# Build one or more binary RPMs from a source RPM.   A typical source RPM
# might produce a base binary RPM, a -devel binary RPM containing library
# and header files and a -debuginfo binary RPM containing debug symbols.
# The repository metadata is updated after building a binary package so that
# a subsequent mock build for a package which depend on this one is able
# to find and install it.
%.rpm:
	@echo [MOCK] $<
	$(AT) mkdir -p $(@D)
	$(AT)$(MOCK) $(MOCK_FLAGS) --rebuild $<


############################################################################
# Dependency build rules
############################################################################

# Generate dependency rules linking spec files to tarballs, source
# packages and binary packages.   planex-depend generates rules suitable
# for RPM or Debian builds depending on the host distribution.
# If dependency generation fails, the deps file is deleted to avoid
# problems with empty, incomplete or corrupt deps.   
$(DEPS): $(SPECS) $(LINKS)
	@echo Updating dependencies...
	$(AT) mkdir -p $(@D)
	$(AT)$(DEPEND) $(DEPEND_FLAGS) $^ > $@

# vim:ft=make:
